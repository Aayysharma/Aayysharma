//Have the function ArrayChallenge (arz) read the array of non-negative integers stored in are which will represent the heights of bars on a graph (where each bar width is 1), and determine the largest area underneath the entire bar graph. For example: if arx is [2, 1, 3, 4, 1] then this looks like the following bar graph:
#include <iostream>
#include <string>
using namespace std;

int HistogramArea(int arr[], int size)
 {
  int maxArea=0;
  for (int current=0; current<size; current++)
  {
    int width=1;
  int moveRight=current+1;
  int moveLeft=current-1;
  while(moveRight<size&&arr[moveRight]>=arr[current])
  {
    width++;
  moveRight++;
  }
  while(moveLeft>=0&&arr[moveLeft]>=arr[current])
  
  {
    width++;
  moveLeft--;
  }
  if(width*arr[current]>maxArea)
  {
    maxArea=width*arr[current];
    }
  } 
  return maxArea;

}

int main() { 
   
  
  int A[] = {2,1,3,4,1};
  int B[] = {6,3,1,4,12,4};
  int C[] = {5,6,7,4,1};
  
  cout << HistogramArea(A,sizeof(A)/sizeof(A[0]))<<endl; //6
  cout << HistogramArea(B,sizeof(B)/sizeof(B[0]))<<endl; //12
  cout << HistogramArea(C,sizeof(C)/sizeof(C[0]))<<endl; //16
  
  return 0;
    
}
